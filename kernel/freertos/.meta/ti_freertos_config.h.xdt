%%{
/*
 * Copyright (c) 2023-2024, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== FreeRTOS_config.h.xdt ========
 */
    let kernel = system.modules["/freertos/FreeRTOS"].$static;
    let hookModule = system.modules["/freertos/idleHooks"];
%%}
/*
 * FreeRTOS Kernel V10.0.0
 * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software. If you wish to use our
 * Amazon FreeRTOS name, please do so in a fair use way that does not cause
 * confusion.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 * 1 tab == 4 spaces!
 */

/******************************************************************************
    See http://www.freertos.org/a00110.html for an explanation of the
    definitions contained in this file.
******************************************************************************/

#ifndef FREERTOS_CONFIG_H
#define FREERTOS_CONFIG_H

/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.
 * http://www.freertos.org/a00110.html
 *----------------------------------------------------------*/

% const device = system.deviceData.deviceId;
% const isM33 = device.match(/(?:CC13.4|CC2653|CC26.4|CC35..|CC27..)/) !== null;

/* These values are generated by SysConfig */

/* General options */
#define configCPU_CLOCK_HZ ((unsigned long)(`kernel.cpuFrequency`))
% if (kernel.useCustomHeap) {
#define configAPPLICATION_ALLOCATED_HEAP 1
% }
% else {
#define configTOTAL_HEAP_SIZE ((size_t)(0x`kernel.heapSize.toString(16)`))
#define configAPPLICATION_ALLOCATED_HEAP 0
% }
#define configCHECK_FOR_STACK_OVERFLOW `kernel.stackOverflowMode`
#define configUSE_PORT_OPTIMISED_TASK_SELECTION `kernel.usePortTaskSelection`
#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP `kernel.idleSleepTicks`

/* Stack sizes, all in words */
#define configMINIMAL_STACK_SIZE ((unsigned short)(`kernel.idleStackSize / 4`))
#define configIDLE_TASK_STACK_DEPTH ((unsigned short)(`kernel.idleStackSize / 4`))
#define configPOSIX_STACK_SIZE ((unsigned short)(`kernel.posixThreadStackSize / 4`))

% if (kernel.useTimers) {
/* Software timer definitions. */
#define configUSE_TIMERS 1
#define configTIMER_TASK_PRIORITY (`kernel.timerTaskPriority`)
#define configTIMER_QUEUE_LENGTH (20)
#define configTIMER_TASK_STACK_DEPTH ((unsigned short)(`kernel.timerStackSize / 4`))
% }

% if (isM33) {
/* TrustZone/PSA settings */
/* We do not set ENABLE_TRUSTZONE, as this is only for Secure Side function call support */
% if (system.modules["/ti/utils/TrustZone"]) {
#define configENABLE_TRUSTZONE 0
#define configRUN_FREERTOS_SECURE_ONLY 0
% }
% else {
#define configENABLE_TRUSTZONE 0
#define configRUN_FREERTOS_SECURE_ONLY 1
% }
% }

% if (kernel.isrStackInitEnabled) {
/*
 * The ISR stack will be initialized in the startup_<device>_<compiler>.c file
 * to 0xa5a5a5a5. The stack peak can then be displayed in Runtime Object View.
 */
#define configENABLE_ISR_STACK_INIT 1
% }
% else {
#define configENABLE_ISR_STACK_INIT 0
% }
% if (kernel.rovQueueEnabled) {
#define configQUEUE_REGISTRY_SIZE `kernel.queueRegistrySize`
% }
% else {
/*
 * Kernel Object Tracking disabled.  Enable Kernel Object Tracking in SysConfig
 * (FreeRTOS.rovQueueEnabled = true) to use the queue registry and/or ROV
 * features.
 */
#define configQUEUE_REGISTRY_SIZE 0
% }

% if (kernel.assertsEnabled) {
#define configASSERT(x)           \
    if ((x) == 0)                 \
    {                             \
        taskDISABLE_INTERRUPTS(); \
        for (;;)                  \
            ;                     \
    }
% }

/* Floating point unit enabled or disabled */
#define configENABLE_FPU `kernel.fpuEnabled ? 1 : 0`

/* Idle hook function enabled or disabled */
#define configUSE_IDLE_HOOK `(hookModule) ? "1" : "0"`

/* Modifying the options below is not permitted or currently unsupported */

/* MPU is disabled */
#define configENABLE_MPU 0

% if (isM33) {
/* The CM33 port requires an additional stack size definition */
#define configMINIMAL_SECURE_STACK_SIZE configMINIMAL_STACK_SIZE
% }

/* Constants related to the behaviour or the scheduler. */
#define configTICK_RATE_HZ (`kernel.tickRate`UL)
#define configUSE_PREEMPTION 1
#define configUSE_TIME_SLICING `kernel.useTimeSlicing ? 1 : 0`
#define configMAX_PRIORITIES (`kernel.maxPriorities`UL)
#define configIDLE_SHOULD_YIELD 0
#define configUSE_16_BIT_TICKS 0 /* Only for 8 and 16-bit hardware. */

/* Constants that describe the hardware and memory usage. */
#define configMAX_TASK_NAME_LEN (`kernel.maxTaskNameLen`)
#define configRECORD_STACK_HIGH_ADDRESS 1

/* Required by TI driver implementations */
#define configSUPPORT_STATIC_ALLOCATION 1

/* Constants that build features in or out. */
#define configUSE_MUTEXES 1
#define configUSE_TICKLESS_IDLE 1
#define configUSE_APPLICATION_TASK_TAG 1 /* Needed by POSIX/pthread */
#define configUSE_CO_ROUTINES 0
#define configUSE_COUNTING_SEMAPHORES 1
#define configUSE_RECURSIVE_MUTEXES 1
#define configUSE_QUEUE_SETS 0
#define configUSE_TASK_NOTIFICATIONS 1

/* Constants that define which hook (callback) functions should be used. */
#define configUSE_TICK_HOOK 0
#define configUSE_MALLOC_FAILED_HOOK 0

/* Constants provided for debugging and optimisation assistance. */
#define configENABLE_BACKWARD_COMPATIBILITY 0

#if defined(__TI_COMPILER_VERSION__) || defined(__ti_version__)
#include <ti/posix/freertos/PTLS.h>
#define traceTASK_DELETE(pxTCB) PTLS_taskDeleteHook(pxTCB)
#elif defined(__IAR_SYSTEMS_ICC__)
#ifndef __IAR_SYSTEMS_ASM__
#include <ti/posix/freertos/Mtx.h>
#define traceTASK_DELETE(pxTCB) Mtx_taskDeleteHook(pxTCB)
#endif
#endif

/*
 *  Enable thread local storage
 *
 *  Assign TLS array index ownership here to avoid collisions.
 *  TLS storage is needed to implement thread-safe errno with
 *  TI and IAR compilers. With GNU compiler, we enable newlib.
 */
#if defined(__TI_COMPILER_VERSION__) || defined(__ti_version__) || defined(__IAR_SYSTEMS_ICC__)

#define configNUM_THREAD_LOCAL_STORAGE_POINTERS 1

#if defined(__TI_COMPILER_VERSION__) || defined(__ti_version__)
#define PTLS_TLS_INDEX 0 /* ti.posix.freertos.PTLS */
#elif defined(__IAR_SYSTEMS_ICC__)
#define MTX_TLS_INDEX 0 /* ti.posix.freertos.Mtx */
#endif

#elif defined(__GNUC__)

#define configNUM_THREAD_LOCAL_STORAGE_POINTERS 0

/* note: system locks required by newlib are not implemented */
#define configUSE_NEWLIB_REENTRANT 1
#endif

/*
 * Set the following definitions to 1 to include the API function, or zero
 * to exclude the API function.  NOTE:  Setting an INCLUDE_ parameter to 0 is
 * only necessary if the linker does not automatically remove functions that
 * are not referenced anyway.
 */
#define INCLUDE_vTaskPrioritySet 1
#define INCLUDE_uxTaskPriorityGet 1
#define INCLUDE_vTaskDelete 1
#define INCLUDE_vTaskCleanUpResources 0
#define INCLUDE_vTaskSuspend 1
#define INCLUDE_vTaskDelayUntil 1
#define INCLUDE_vTaskDelay 1
#define INCLUDE_uxTaskGetStackHighWaterMark 0
#define INCLUDE_xTaskGetIdleTaskHandle 0
#define INCLUDE_eTaskGetState 1
#define INCLUDE_xTaskResumeFromISR 0
#define INCLUDE_xTaskGetCurrentTaskHandle 1
#define INCLUDE_xTaskGetSchedulerState 1
#define INCLUDE_xSemaphoreGetMutexHolder 0
% if (kernel.useEventGroups) {
#define INCLUDE_xTimerPendFunctionCall 1
% }

/* Cortex-M3/4 interrupt priority configuration follows...................... */

/* Use the system definition.
 * The number of priority bits is reduced by one for TFM-enabled configurations.
 */
#define configPRIO_BITS `kernel.nvicPriBits`

/*
 * The lowest interrupt priority that can be used in a call to a "set priority"
 * function.
 */
#define configLIBRARY_LOWEST_INTERRUPT_PRIORITY `(2**kernel.nvicPriBits) - 1`

/*
 * The highest interrupt priority that can be used by any interrupt service
 * routine that makes calls to interrupt safe FreeRTOS API functions.  DO NOT
 * CALL INTERRUPT SAFE FREERTOS API FUNCTIONS FROM ANY INTERRUPT THAT HAS A
 * HIGHER PRIORITY THAN THIS! (higher priorities are lower numeric values.
 */
#define configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY `kernel.maxInterruptPriority`

/*
 * Interrupt priorities used by the kernel port layer itself.  These are generic
 * to all Cortex-M ports, and do not rely on any particular library functions.
 */
#define configKERNEL_INTERRUPT_PRIORITY (configLIBRARY_LOWEST_INTERRUPT_PRIORITY << (8 - configPRIO_BITS))

/*
 * !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
 * See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html.
 *
 * The priority is shifted since NVIC priority bits are placed MSB.
 * Priority 0 is the highest priority.
 * Priority 1 is the second highest priority, etc.
 */
#define configMAX_SYSCALL_INTERRUPT_PRIORITY (configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY << (8 - configPRIO_BITS))

/*
 * The trace facility is turned on to make some functions available for use in
 * CLI commands.
 */
#define configUSE_TRACE_FACILITY 1

#endif /* FREERTOS_CONFIG_H */
