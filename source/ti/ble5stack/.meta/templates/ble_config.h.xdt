/*
 *  ======== ti_ble_config.h ========
 *  Configured BLE module definitions
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

#ifndef TI_BLE_CONFIG_H
#define TI_BLE_CONFIG_H
%%{


const ble = system.modules["/ti/ble5stack/ble"].$static;
const common = system.getScript("/ti/ble5stack/ble_common.js");
const devFamily = common.device2DeviceFamily(system.deviceData.deviceId);

let rfdesign;
let frontEnd;
let bias;

if(devFamily != "DeviceFamily_CC23X0R5" && devFamily != "DeviceFamily_CC23X0R2")
{
    rfdesign = system.modules["/ti/devices/radioconfig/rfdesign"].$static;

    bias = "RF_FE_INT_BIAS";
    frontEnd = "RF_FE_DIFFERENTIAL";

    // Get the selected Bias from the rfdesign module
    if(rfdesign.fe24g.includes("X") || rfdesign.fe24g.includes("XS"))
    {
        bias = "RF_FE_EXT_BIAS";
    }

    // Get the selected frontEnd mode from the rfdesign module
    if(rfdesign.fe24g.includes("RFP"))
    {
        frontEnd = "RF_FE_SINGLE_ENDED_RFP";
    }
    else if(rfdesign.fe24g.includes("RFN"))
    {
        frontEnd = "RF_FE_SINGLE_ENDED_RFN";
    }
}
%%}

#include <bcomdef.h>
#include <gapgattserver.h>
#include <gap_advertiser.h>
% if(ble.bondManager == true) {
#include <gapbondmgr.h>
%}
% if(devFamily != "DeviceFamily_CC23X0R5" && devFamily != "DeviceFamily_CC23X0R2")
% {
#include <ti_radio_config.h>
%}
% if (ble){

// The GAP profile role
extern uint8_t profileRole;
// GAP GATT Service (GGS) parameters
extern uint8_t attDeviceName[GAP_DEVICE_NAME_LEN];
% if(ble.basicBLE){
extern void init_profiles(void);
%}
%if(devFamily != "DeviceFamily_CC23X0R5" && devFamily != "DeviceFamily_CC23X0R2")
%{
% if(rfdesign){
#define RF_FE_MODE_AND_BIAS            `frontEnd` | `bias`
%}
%}

% if(devFamily == "DeviceFamily_CC23X0R5" || devFamily == "DeviceFamily_CC23X0R2")
% {
// Default Tx Power value in dBm
#define DEFAULT_TX_POWER               `ble.defaultTxPowerValue`
% }
% else
% {
// Default Tx Power Index
#define DEFAULT_TX_POWER               `common.convertTxPowerValueToIndex(ble.defaultTxPowerValue)`
% }

//Random Address
extern uint8_t pRandomAddress[B_ADDR_LEN];

// Address mode of the local device
// Note: When using the DEFAULT_ADDRESS_MODE as ADDRMODE_RANDOM or 
// ADDRMODE_RP_WITH_RANDOM_ID, GAP_DeviceInit() should be called with 
// it's last parameter set to a static random address
#define DEFAULT_ADDRESS_MODE                  `ble.addressMode`

// How often to read current RPA (in ms)
#define READ_RPA_PERIOD                       `ble.rpaRead`

// Maximum number of BLE HCI PDUs. If the maximum number connections (above)
// is set to 0 then this number should also be set to 0.
#define MAX_NUM_PDU                   		    `ble.maxPDUNum`

// Maximum size in bytes of the BLE HCI PDU. Valid range: 27 to 255
// The maximum ATT_MTU is MAX_PDU_SIZE - 4.
#define MAX_PDU_SIZE                  		    `ble.maxPDUSize`

% if (ble.deviceRole != "BROADCASTER_CFG" && ble.deviceRole != "OBSERVER_CFG" && ble.deviceRole != "BROADCASTER_CFG+OBSERVER_CFG" && ble.bondManager == true){
/*********************************************************************
 * Bond Manager Configuration
 */

#define GAP_BONDINGS_MAX                      `ble.maxBonds`
#define GAP_CHAR_CFG_MAX                      `ble.maxCharCfg`

extern gapBondParams_t gapBondParams;

extern uint8_t pairMode;
extern uint8_t mitm;
extern uint8_t ioCap;
extern uint8_t bonding;
extern uint8_t secureConnection;
extern uint8_t authenPairingOnly;
extern uint8_t `common.getAutoSyncName()`;
% if(ble.secureConn != "GAPBOND_SECURE_CONNECTION_NONE" && !ble.eccDebugKeys)
% {
extern uint8_t eccReGenPolicy;
% }
extern uint8_t KeySize;
extern uint8_t removeLRUBond;
% if(ble.deviceRole.includes("CENTRAL_CFG"))
% {
extern uint8_t bondFailAction;
% }
extern uint8_t KeyDistList;
extern uint8_t eccDebugKeys;
extern uint8_t allowDebugKeys;
extern uint8_t eraseBondWhileInConn;
extern uint8_t sameIrkAction;

extern void setBondManagerParameters();

%}
% if (ble.hideCentralGroup == false){


// Initiator PHY Parameters

// Default PHY for initiating
#define DEFAULT_INIT_PHY                      `ble.initiatingPHY`

// Default scan interval (in 0.625ms)
#define INIT_PHYPARAM_SCAN_INT    		      `(ble.centralScanInt)/0.625`

// Default scan window (in 0.625ms)
#define INIT_PHYPARAM_SCAN_WIN    		      `(ble.centralScanWin)/0.625`

// Default minimum connection interval (in 1.25ms)
#define INIT_PHYPARAM_MIN_CONN_INT    		  `(ble.connIntMin)/1.25`

// Default maximum connection interval (in 1.25ms)
#define INIT_PHYPARAM_MAX_CONN_INT    		  `ble.connIntMax/1.25`

// Default connection latency
#define INIT_PHYPARAM_CONN_LAT    		      `ble.centraConnLatency`

// Default Supervision Timeout (in 10ms)
#define INIT_PHYPARAM_SUP_TO   		          `ble.centraSupTimeout/10`

// Default RSSI polling period in ms
#define DEFAULT_RSSI_PERIOD                   `ble.rssiPollingPeriod`

// Minimum connection interval (units of 1.25ms) if automatic parameter update
// request is enabled
#define DEFAULT_UPDATE_MIN_CONN_INTERVAL      `(ble.connUpdateParamsCentral.reqMinConnInt)/1.25`

// Maximum connection interval (units of 1.25ms) if automatic parameter update
// request is enabled
#define DEFAULT_UPDATE_MAX_CONN_INTERVAL      `(ble.connUpdateParamsCentral.reqMaxConnInt)/1.25`

// Peripheral latency to use if automatic parameter update request is enabled
#define DEFAULT_UPDATE_PERIPHERAL_LATENCY     `ble.connUpdateParamsCentral.reqPeripheralLat`

// Supervision timeout value (units of 10ms) if automatic parameter update
// request is enabled
#define DEFAULT_UPDATE_CONN_TIMEOUT           `(ble.connUpdateParamsCentral.reqConnTo)/10`

%}
%
% if (ble.hideObserverGroup == false){


//Primary PHY Parameters

// Default PHY for scanning
#define DEFAULT_SCAN_PHY                        `ble.scanPHY`

//Default Scan type (Active/Passive)
#define DEFAULT_SCAN_TYPE                       `ble.scanType`

// Scan period
#define DEFAULT_SCAN_PERIOD                     `ble.scanPeriod/1.28`

// Default scan interval (in 625 us ticks)
#define DEFAULT_SCAN_INTERVAL                   `(ble.scanInt)/0.625`

// Default scan window   (in 625 us ticks)
#define DEFAULT_SCAN_WINDOW                     `(ble.scanWin)/0.625`

// Default scan duration in 10 ms
#define DEFAULT_SCAN_DURATION                   `(ble.scanDuration)/10`

// Advertising report fields to keep in the list
#define ADV_RPT_FIELDS                          (`ble.advRptFields.join(" | ")`)

// Scanner Filter Policy
#define SCANNER_FILTER_POLICY                   `ble.fltPolicy`

// Scanner Filter PDU Type
#define SCANNER_FILTER_PDU_TYPE                  (`ble.fltPduType.join(" | ")`)

// Scanner Filter Minimum RSSI
#define SCANNER_FILTER_MIN_RSSI                  `ble.fltMinRssi`

// Scanner Discoverable Mode Filter
#define SCANNER_FILTER_DISC_MODE                 `ble.fltDiscMode`

// Scanner Duplicate Filter
#define SCANNER_DUPLICATE_FILTER                 `ble.dupFilter`

// TRUE to filter discovery results on desired service UUID
#define DEFAULT_DEV_DISC_BY_SVC_UUID            `ble.disDevBySerUuid`

// Maximum number of advertising reports
#define APP_MAX_NUM_OF_ADV_REPORTS              `ble.maxNumAdvReport`

%}
%
% if (ble.hidePeripheralGroup == false){


// Pass parameter updates to the app for it to decide.
#define DEFAULT_PARAM_UPDATE_REQ_DECISION       `ble.paramUpdateReq`

% if (ble.sendParamsUpdateReq){
// Pass parameter updates to the app for it to decide.
#define DEFAULT_SEND_PARAM_UPDATE_REQ

// Delay (in ms) after connection establishment before sending a parameter update requst
#define SEND_PARAM_UPDATE_DELAY                 `ble.connUpdateParamsPeripheral.paramUpdateDelay`

// Minimum connection interval (units of 1.25ms) if automatic parameter update
// request is enabled
#define DEFAULT_DESIRED_MIN_CONN_INTERVAL      `(ble.connUpdateParamsPeripheral.reqMinConnInt)/1.25`

// Maximum connection interval (units of 1.25ms) if automatic parameter update
// request is enabled
#define DEFAULT_DESIRED_MAX_CONN_INTERVAL      `(ble.connUpdateParamsPeripheral.reqMaxConnInt)/1.25`

// Peripheral latency to use if automatic parameter update request is enabled
#define DEFAULT_DESIRED_PERIPHERAL_LATENCY     `ble.connUpdateParamsPeripheral.reqPeripheralLat`

// Supervision timeout value (units of 10ms) if automatic parameter update
// request is enabled
#define DEFAULT_DESIRED_CONN_TIMEOUT           `(ble.connUpdateParamsPeripheral.reqConnTo)/10`
%}

%}
%
% if (ble.hideBroadcasterGroup == false){

%
% for(let i = 1; i <= ble.numOfAdvSets; i++)
% {

// Advertisement Set Number `i`
extern GapAdv_params_t `ble["advSet"+i]["advParam"+i].name`;
% if (ble["advSet"+i]["advData"+i])
% {
% let advModule = ble["advSet"+i]["advData"+i];
% if(common.advDataTotalLength(advModule, advModule.$module.config) > 0)
% {
extern uint8_t `ble["advSet"+i]["advData"+i].name`[`common.advDataTotalLength(advModule, advModule.$module.config)`];
% }
% }
% if (ble["advSet"+i]["scanRes"+i])
% {
% let scanModule = ble["advSet"+i]["scanRes"+i];
% if(common.advDataTotalLength(scanModule, scanModule.$module.config) > 0)
% {
extern uint8_t `ble["advSet"+i]["scanRes"+i].name`[`common.advDataTotalLength(scanModule, scanModule.$module.config)`];
% }
% }
% }
%}
%}

% if (ble.hideL2CAPGroup == false){
#define L2CAP_PSM_ID                      `ble.L2CAPCOCpsmId`
#define L2CAP_PEER_PSM_ID                 `ble.L2CAPCOPeerPsmId`
#define L2CAP_MAX_MTU                     `ble.L2CAPCOCmaxMTU`
#define L2CAP_MAX_MPS                     `ble.L2CAPCOCmaxMPS`
#define L2CAP_NOF_CREDITS                 `ble.L2CAPCOCnofCredits`
#define L2CAP_CREDITS_THRESHOLD           `ble.L2CAPCOCcreditsThreshold`
#define L2CAP_CONN_ESTABLISH_ROLE         `ble.L2CAPCOCInitiator`
%}

// SDAA parameters
% if(ble.adaptivity)
% {
#define SDAA_MAX_THRESHOLD                  `ble.txUsageThresh`
#define SDAA_RX_WINDOW_DURATION             `ble.rxWindowDuration`
#define SDAA_RSSI_THRESHOLD                 `ble.rssiThreshold`
#define SDAA_MAX_ALLOWED_NOISY_SAMPLES      `ble.numberOfNoisySamples`
#define SDAA_MAX_BLOCKED_CHANNEL_TIME       `ble.blockingChannelTime`
#define SDAA_CONST_OBSERV_TIME              `ble.fixedObservTime`
#define SDAA_OBSERVATION_TIME               `ble.observationTime`
% }

#endif /* TI_BLE_CONFIG_H */
