%%{
/*
 * Copyright (c) 2021-2024 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== LogModule.Config.c.xdt ========
 */
%%}
%%{
    let LogModule = args[0];
    let LogModuleStatic = LogModule.$static;
    let instances = LogModule.$instances;
    if (instances.length == 0) return;

    function getEnabledLevels(inst)
    {
        let levels = new Array();
        if (inst.enableModule) {
            if (inst.enable_DEBUG && LogModuleStatic.enable_DEBUG) levels.push("Log_DEBUG");
            if (inst.enable_VERBOSE && LogModuleStatic.enable_VERBOSE) levels.push("Log_VERBOSE");
            if (inst.enable_INFO && LogModuleStatic.enable_INFO) levels.push("Log_INFO");
            if (inst.enable_WARNING && LogModuleStatic.enable_WARNING) levels.push("Log_WARNING");
            if (inst.enable_ERROR && LogModuleStatic.enable_ERROR) levels.push("Log_ERROR");
        }
        if (levels.length == 0) levels.push("0");

        return (levels.join(" | "));
    }
%%}
/*
 *  ======== Log Modules ========
 */
% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
%     let sinkInstance = inst.logger.$name;
%     let sinkType = inst.logger.$module.displayName;
%     let printfDelegate = inst.logger.printfDelegate;
%     let bufDelegate = inst.logger.bufDelegate;
%     let shortName = sinkType.replace("LogSink", "").toUpperCase();
%     let enabledLevels = getEnabledLevels(inst);
%     if (LogModuleStatic.enableGlobal === false) {
%       enabledLevels = 0;
%     }
%   if (LogModuleStatic.enableDynamicModuleLogLevels === true) {
uint32_t `sinkType`_`inst.$name`_dynamicLevels = (`enabledLevels`);
Log_MODULE_DEFINE(`inst.$name`, Log_MODULE_INIT_SINK_`shortName`(`sinkInstance`, Log_NONE, `printfDelegate`, `bufDelegate`, &`sinkType`_`inst.$name`_dynamicLevels));
%   }
%   else {
Log_MODULE_DEFINE(`inst.$name`, Log_MODULE_INIT_SINK_`shortName`(`sinkInstance`, `enabledLevels`, `printfDelegate`, `bufDelegate`, NULL));
%   }

% }
