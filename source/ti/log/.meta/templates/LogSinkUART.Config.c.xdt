%%{
/*
 * Copyright (c) 2023-2024 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== LogSinkUART.Config.c.xdt ========
 */
%%}
%%{
    let LogSinkUART = args[0];
    let instances = LogSinkUART.$instances;

    if (instances.length == 0) return;

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = LogSinkUART.defaultInstanceName + "COUNT";
%%}
/*
 *  ======== LogSinkUART ========
 */
#include <ti/log/LogSinkUART.h>
#include "ti_drivers_config.h"

#define `countDef` `instances.length`

LogSinkUART_Object LogSinkUART_objects[`countDef`];

% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
static unsigned char LogSinkUART_ringBuffer`i`[`inst.BufferSize`];
% }

static const LogSinkUART_HWAttrs LogSinkUART_hwAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%    let inst           = instances[i];
  {
    .bufPtr             = LogSinkUART_ringBuffer`i`,
    .bufSize            = sizeof(LogSinkUART_ringBuffer`i`),
    .baudRate           = `inst.baudRate`,
    .parity             = `inst.parity`,
    .uartIndex          = `inst.uart.$name`
  },
% }
};


const LogSinkUART_Config LogSinkUART_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst    = instances[i];
    {   /* `inst.$name` */
        .object      = &LogSinkUART_objects[`inst.$name`],
        .hwAttrs     = &LogSinkUART_hwAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t LogSinkUART_count = `countDef`;

% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
Log_SINK_UART_DEFINE(`inst.$name`);
% }
