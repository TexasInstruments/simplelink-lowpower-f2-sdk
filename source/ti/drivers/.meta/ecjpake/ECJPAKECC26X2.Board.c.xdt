%%{
/*
 * Copyright (c) 2018-2023, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ECJPAKECC26X2.Board.c.xdt ========
 */

    let ECJPAKE   = args[0];
    let Common    = system.getScript("/ti/drivers/Common.js");

    let instances = ECJPAKE.$instances;
    if (instances.length == 0) return;

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ECJPAKE.defaultInstanceName + "COUNT";

%%}
/*
 *  =============================== ECJPAKE ===============================
 */

#include <ti/drivers/ECJPAKE.h>
#include <ti/drivers/ecjpake/ECJPAKECC26X2.h>

#define `countDef` `instances.length`

% if (system.modules["/ti/utils/TrustZone"]) {
#include <ti/drivers/ecjpake/ECJPAKECC26X4_ns.h>
#include <ti/drivers/ecjpake/ECJPAKECC26X4_s.h>
/* These object arrays store non-secure copies of the secure callback struct and
 * handle parameters required for Secure/Non-secure driver functionality. The
 * SECURE_CALLBACK_COUNT is the total number of static and dynamic driver
 * instances supported by the TF-M.
 */
ECJPAKE_s_SecureCallback ecjpakeSecureCB_ns[ECJPAKE_SECURE_CALLBACK_COUNT];
ECJPAKECC26X4_ns_Object ecjpakeObject_ns[ECJPAKE_SECURE_CALLBACK_COUNT];
% }

ECJPAKECC26X2_Object ecjpakeCC26X2Objects[`countDef`];

/*
 *  ======== ecjpakeCC26X2HWAttrs ========
 */
const ECJPAKECC26X2_HWAttrs ecjpakeCC26X2HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst        = instances[i];
    {
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
    },
% }
};

const ECJPAKE_Config ECJPAKE_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst    = instances[i];
    {   /* `inst.$name` */
        .object         = &ecjpakeCC26X2Objects[`inst.$name`],
        .hwAttrs        = &ecjpakeCC26X2HWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t ECJPAKE_count = `countDef`;
