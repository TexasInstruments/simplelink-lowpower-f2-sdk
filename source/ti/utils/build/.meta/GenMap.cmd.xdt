%%{
    /*
     *  ======== GenMap.cmd.xdt ========
     *  Generate definitions for linker command files.
     *
     *  The GenMap.cmd.xdt template generates a linker-compatible file
     *  containing Component-contributed definitions that may be used by end
     *  users. This file helps insulate end users from device specifics
     *  (e.g. FLASH base address and size).
     *
     *  How it works
     *  ------------
     *  Any module in a SysConfig configuration can contribute one or more
     *  definitions to a generated ti_utils_build_linker.cmd.genmap file.
     *  This is similar to the GenOpts and GenLibs features.
     *
     *  Generated items should either be definitions that are used in memory maps
     *  or symbols that can be used by tooling, such as the CRC checksum tool.
     *  Definitions will contain a ti_utils_build_GenMap_ prefix, and symbols
     *  will contain a ti_utils_build_GenMap_sym_ prefix to protect against
     *  collisions with end-user definitions that may already exist. Their names
     *  and values are provided by getLinkerDefs() and getLinkerSyms()
     *  respectively.
     *
     *  By convention, 'names' returned by getLinkerDefs() and getLinkerSyms()
     *  should be Module-prefixed to protect against name collisions. For
     *  example, a SLComp Module should prefix its definitions with "SLCOMP_"
     *  (see below). And GenMap will then generate definitions with a
     *  ti_utils_build_GenMap_SLCOMP_ prefix.
     *
     *  Modules contribute options by:
     *      1. Defining a getLinkerDefs() and/ or getLinkerSyms() functions that
     *         return an array of name/value objects
     *      2. Declaring GenMap.cmd.xdt in its exports.templates object
     *
     *  Usage example
     *  ------------
     *  A module named "/ti/slcomp/SLComp" would add the following:
     *
     * templates: {
     *     "/ti/utils/build/GenMap.cmd.xdt": {
     *         modName: "/ti/slcomp/SLComp",
     *         getLinkerDefs: getLinkerDefs,
     *         getLinkerSyms: getLinkerSyms,
     *     }
     * }
     *
     * // getLinkerDefs() and getLinkerSyms() returns an array of name/value
     * // objects
     * function getLinkerDefs() {
     *     return [{name: "SLCOMP_DEF1", value: 0xdeadbeef}];
     * }
     */
%%}
/*
 *  ======== ti_utils_build_linker.cmd.genmap ========
 *  SysConfig-generated linker definitions.
 *
 *  This file provides "more portable" definitions for linker command files.
 *  The intent is to enable easier porting to different devices by leveraging
 *  these definitions.
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool for the
 *                `system.deviceData.deviceId` device, `system.compiler` C/C++ toolchain
 */
% if ((system.compiler == 'ticlang') || (system.compiler == 'gcc') ||
%     (system.compiler == 'iar')) {
%     for (let arg of args) {
%         var mod = system.modules[arg.modName];
%         /* Make sure the relevant module has actually been added to the project */
%         if (mod != null) {
%             let mod_ldefs = arg.getLinkerDefs?.(mod);
%             if (mod_ldefs !== undefined && mod_ldefs.length > 0) {

/* definitions provided by `arg.modName` */
%%{
                  /*
                   * Loop over all module-supplied name/value definition pairs,
                   * generating a definition for each.  The definition's name
                   * will have a ti_utils_build_GenMap_ prefix, and the value
                   * will be hexified for readability.  As each toolchain's
                   * syntax is unique, there is special case handling for each.
                   */
%%}
%
%               for (let i = 0; i < mod_ldefs.length; i++) {
%                   if(system.compiler == 'ticlang') {
#define ti_utils_build_GenMap_`mod_ldefs[i].name` 0x`mod_ldefs[i].value.toString(16)`
%                   }
%                   else if(system.compiler == 'gcc') {
ti_utils_build_GenMap_`mod_ldefs[i].name` = 0x`mod_ldefs[i].value.toString(16)`;
%                   }
%                   else if(system.compiler == 'iar') {
define symbol ti_utils_build_GenMap_`mod_ldefs[i].name` = 0x`mod_ldefs[i].value.toString(16)`;
%                   }
%               }
%             }
%             let mod_lsymbols = arg.getLinkerSyms?.(mod);
%             if (mod_lsymbols !== undefined && mod_lsymbols.length > 0) {
/* symbols provided by `arg.modName` */
%%{
                  /*
                   * Loop over all module-supplied name/value definition pairs,
                   * generating a symbol for each.  The symbol's name
                   * will have a ti_utils_build_GenMap_sym prefix, and the value
                   * will be hexified for readability.  As each toolchain's
                   * syntax is unique, there is special case handling for each.
                   */
%%}
%                 for (let i = 0; i < mod_lsymbols.length; i++) {
%                   if((system.compiler == 'ticlang' || (system.compiler == 'gcc'))) {
ti_utils_build_GenMap_sym_`mod_lsymbols[i].name` = 0x`mod_lsymbols[i].value.toString(16)`;
%                   }
%                   else if(system.compiler == 'iar') {
define exported symbol ti_utils_build_GenMap_sym_`mod_lsymbols[i].name` = 0x`mod_lsymbols[i].value.toString(16)`;
%                   }
%                 }
%             }
%         }
%     }
% } else {
/*
 *  WARNING: unsupported toolchain specified: '`system.compiler`'
 */
% }
